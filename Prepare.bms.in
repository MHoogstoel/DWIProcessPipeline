FileExists( var ${OUTPUTDIR} )
If( ${var} == 0 )
  echo('Creation of the output directory: '${OUTPUTDIR})
  MakeDirectory( ${OUTPUTDIR} )
EndIf( ${var} == 0 )
FileExists( var ${TEMPDIR} )
If( ${var} == 0 )
  echo('Creation of the temporary directory: '${TEMPDIR})
  MakeDirectory( ${TEMPDIR} )
EndIf( ${var} == 0 )


If( ${COPY_INPUTS} == TRUE ) Then
  #copy image to process
  Set( ORIG_IMAGE ${INPUT}.${EXT} )
  If( ${INPUTTYPE} == 'DWI' )
      Set( CmdTool ${ResampleVolume2PATH} )
      Set( DWImage ${ROOTNAME}.nrrd )
  EndIf( ${INPUTTYPE} == 'DWI' )
  If( ${INPUTTYPE} == 'scalar' )
      Set( CmdTool ${ResampleVolume2PATH} )
  EndIf( ${INPUTTYPE} == 'scalar' )
  If( ${INPUTTYPE} == 'DTI' )
      Set( CmdTool ${ResampleDTIPATH} )
  EndIf( ${INPUTTYPE} == 'DTI' )
  echo ('Copying input image to output directory' )
  Set( Cmd ${CmdTool} ${INPUTDIR}/${ORIG_IMAGE} ${OUTPUTDIR}/${ROOTNAME}.nrrd -i nn )
  Run( output ${Cmd} )
  Echo( ${output} )
  Set( EXT nrrd )
  Set( INPUT ${ROOTNAME} )
  Set( INPUTDIR ${OUTPUTDIR} )
  Set( DTI_DIR ${OUTPUTDIR} )
  #copy atlas
  echo ('Copying atlas image to output directory' )
  Set( Cmd ${CmdTool} ${TEMPLATEDIR}/${TEMPLATE} ${OUTPUTDIR}/template.nrrd -i nn )
  Run( output ${Cmd} )
  Echo( ${output} )
  Set( TEMPLATEDIR ${OUTPUTDIR} )
  Set( TEMPLATE template.nrrd )
  #Copy initial transform
  if(${InitialTransform} != '' )
    GetFilename( EXT_TRANS ${InitialTransform} EXTENSION )
    CopyFile( ${InitialTransform} ${OUTPUTDIR}/InitialTransform${EXT_TRANS} )
    set(InitialTransform  ${OUTPUTDIR}/InitialTransform${EXT_TRANS} )
  endif(${InitialTransform} != '' )
  #Copy transform
  if(${TRANSFORMATIONFILE} != '' )
    GetFilename( EXT_TRANS ${TRANSFORMATIONFILE} EXTENSION )
    CopyFile( ${TRANSFORMATIONFILE} ${OUTPUTDIR}/Transform${EXT_TRANS} )
    set(TRANSFORMATIONFILE  ${OUTPUTDIR}/Transform${EXT_TRANS} )
    Set( TransformRelativePATH Transform${EXT_TRANS} )
  endif(${TRANSFORMATIONFILE} != '' )
EndIf( ${COPY_INPUTS} == TRUE )


If (${COMPUTEORIENTATION} == TRUE ) Then
  echo ('Computation of orientation transformation' )
  Set( ComputeOrientationCmd ${ManualImageOrientPATH} ${MANUALORIENTATION} LPS ${TEMPDIR}/${ROOTNAME}_orientation.txt )
  Run (output ${ComputeOrientationCmd})
  echo(${output})
  Set( ORIG_IMAGE ${INPUT}.${EXT} )
  Set( ORIENTED_IMAGE ${ROOTNAME}_oriented.nrrd )
  If( ${INPUTTYPE} == 'DWI' )
      Set( DWImage ${ORIENTED_IMAGE} )
      Set( CmdTool ${ResampleVolume2PATH} )
  EndIf( ${INPUTTYPE} == 'DWI' )
  If( ${INPUTTYPE} == 'scalar' )
      Set( B0 ${ORIENTED_IMAGE} )
      Set( CmdTool ${ResampleVolume2PATH} )
  EndIf( ${INPUTTYPE} == 'DWI' )
  If( ${INPUTTYPE} == 'DTI' )
      Set( DTImage ${ORIENTED_IMAGE} )
      If( LOG == TRUE )
        Set( CmdTool ${LogEuclideanPATH} )
      Else( LOG == TRUE )
        Set( CmdTool ${ResampleDTIPATH} )
      Endif( LOG == TRUE )
#     Set( CmdTool ResampleDTI )
  EndIf( ${INPUTTYPE} == 'DTI' )
  Set( GRID ${TEMPDIR}/${ROOTNAME}_orientation_grid.nrrd )
  Set( GridCmd ${ITKTransformToolsPATH} size ${INPUTDIR}/${ORIG_IMAGE} ${TEMPDIR}/${ROOTNAME}_orientation.txt --grid ${GRID} )
  Run( output ${GridCmd} )
  Echo( ${output} )
  Set( Cmd ${CmdTool} ${INPUTDIR}/${ORIG_IMAGE} ${OUTPUTDIR}/${ORIENTED_IMAGE} -f ${TEMPDIR}/${ROOTNAME}_orientation.txt -R ${GRID} )
  Run( output ${Cmd} )
  Echo( ${output} )
  Set( EXT nrrd )
  Set( INPUTDIR ${OUTPUTDIR} )
  Set( DTI_DIR ${OUTPUTDIR} )
EndIf (${COMPUTEORIENTATION})


If( ${INPUTTYPE} == 'DWI' )
  Set( B0Flag "" )
  Set( IDWIFlag "" )
  If (${CREATEB0} == TRUE ) Then
    Set( B0Flag --B0 ${TEMPDIR}/${B0} )
  EndIf (${CREATEB0})
  echo ('Creation of the DTI' )
  Set( MASK ${ROOTNAME}_mask.nrrd )
  Set( BASELINE ${ROOTNAME}_baseline.nrrd )
  Set (GenerateDTICmd ${DiffusionTensorEstimationPATH} ${INPUTDIR}/${DWImage} --removeislands -o 0 -e WLS ${OUTPUTDIR}/${DTImage} ${TEMPDIR}/${BASELINE} ${TEMPDIR}/${MASK} )
  Run (output ${GenerateDTICmd})
  Echo (${output})
  If (${CREATEIDWI} == TRUE ) Then
    Set (IDWIFlag --idwi ${TEMPDIR}/${IDWImage} )
  EndIf (${CREATEIDWI})
  If (${CREATEB0} == TRUE || ${CREATEIDWI} == TRUE ) Then
    echo ('Creation of B0 and/or IDWI' )
    Set (GenerateCmd ${dtiestimPATH} --dwi_image ${INPUTDIR}/${DWImage} --tensor_output ${TEMPDIR}/${DTImage} ${B0Flag} ${IDWIFlag} )
    Run (output ${GenerateCmd})
    Echo (${output})    
  Endif (${CREATEB0} == TRUE || ${CREATEIDWI} == TRUE )
EndIf( ${INPUTTYPE} == 'DWI' )

If( ${SCALE} == TRUE )
  Set( ImageGrid ${OUTPUTDIR}/ImageGrid.nrrd )
  Set( AtlasGrid ${OUTPUTDIR}/AtlasGrid.nrrd )
  Set( ScaleCmd ${ITKTransformToolsPATH} scale ${INPUTDIR}/${INPUT}.${EXT} ${TEMPLATEDIR}/${TEMPLATE} ${ImageGrid} ${AtlasGrid} )
  echo( ${ScaleCmd} )
  Run( output ${ScaleCmd} )
  echo( ${output} )
  Set( ATLAS_ISO_SCALED ${OUTPUTDIR}/template_iso_scale.nrrd )
  Set( ResampleCmd ${ResampleVolume2PATH} ${TEMPLATEDIR}/${TEMPLATE} ${ATLAS_ISO_SCALED} -R ${AtlasGrid} )
  echo( ${ResampleCmd} )
  Run( output ${ResampleCmd} )
  echo( ${output} )
#  Set( ImageMathCmd ${ImageMathPATH} ${MOVING_IMAGE_ISO_SCALED} -changeSp 1,1,1 -outfile ${MOVING_IMAGE_ISO_SCALED} -type float)
#  echo( ${ImageMathCmd} )
#  Run( output ${ImageMathCmd} )
#  echo( ${output} )
  Set( ImageMathCmd ${ImageMathPATH} ${ATLAS_ISO_SCALED} -changeSp 1,1,1 -outfile ${ATLAS_ISO_SCALED} -type float )
  echo( ${ImageMathCmd} )
  Run( output ${ImageMathCmd} )
  echo( ${output} )  
EndIf( ${SCALE} == TRUE )
